generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name     String
  email    String  @unique
  password String
  avatar   String?
  location String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  refresh_token RefreshToken?
  barber        Barber?
  appointment   Appointment[]

  @@map("users")
}

model RefreshToken {
  id String @id @default(uuid())

  expiresIn Int @map("expires_in")

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("refresh_token")
}

model Barber {
  id String @id @default(uuid())

  name           String   @unique
  location       String
  description    String
  images         String[]
  openAtNight    Boolean  @map("open_at_night")
  openOnWeekends Boolean  @map("open_on_weekends")

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  appointment Appointment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("barbers")
}

model Appointment {
  id String @id @default(uuid())

  date DateTime

  userId   String @map("user_id")
  user     User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  barberId String @map("barber_id")
  barber   Barber @relation(fields: [barberId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("appointments")
}
